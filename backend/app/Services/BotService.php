<?php

namespace App\Services;

use App\Models\Bot\User;
use Illuminate\Support\Facades\Crypt;
use Telegram\Bot\Laravel\Facades\Telegram;
use App\Services\UserService;
use App\Services\MessageService;
use App\Services\StreamService;
use Illuminate\Support\Facades\Redis;

class BotService
{
    public function __construct(private UserService $userService, private MessageService $messageService, private StreamService $streamService)
    {
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    public $update, $bot, $markup, $model, $user, $webUser;
    public $commands = [
        'profile' => ['–ø—Ä–æ—Ñ–∏–ª—å'],
        'billing' => ['–ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'],
        'new' => ['–Ω–æ–≤—ã–π —á–∞—Ç'],
        'connect' => ['–ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç chagle'],
        'change' => [
            '–∏–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å',
            'gpt-3.5-turbo',
            'gpt-3.5-turbo-16k',
            'openai/gpt-4',
            'openai/gpt-4-32k',
            'openai/gpt-4-turbo-preview',
            'anthropic/claude-instant-1',
            'anthropic/claude-3-opus',
            'anthropic/claude-3-haiku',
            'google/gemini-pro'
        ],
        'start' => ['/start', '—Ç–µ—Å—Ç']
    ];

    // –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–º–µ—Å—Ç–æ construct
    public function init()
    {
        $this->bot = Telegram::bot();
        $this->markup = json_encode([
            'keyboard' => [
                ['–ù–æ–≤—ã–π —á–∞—Ç'],
                ['–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', '–ü—Ä–æ—Ñ–∏–ª—å'],
                ['–ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç Chagle', '–ò–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å'],
            ],
            'resize_keyboard' => true,
            'one_time_keyboard' => true
        ]);
    }

    // –ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥—ã

    public function commandRun($text, $argument = NULL)
    {
        foreach ($this->commands as $functionName => $subCommands) {
            if (in_array($text, $subCommands)) {
                call_user_func([self::class, $functionName], $argument);
                return true;
            }
        }

        return false;
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    public function getUser()
    {
        $from = $this->update->from;

        $user = User::where('telegram_id', $from->id);

        $userName = $from->first_name . ' ' . $from->last_name;

        if ($user->exists()) {
            $user = $user->first();
            $user->shortname = @$from->username;
            $user->name = $userName;
            $user->save();
        } else {
            $user = User::create([
                'telegram_id' => $from->id,
                'shortname' => @$from->username,
                'name' => $userName,
                'balance' => '2',
                'level' => 1,
                'model' => 'gpt-3.5-turbo'
            ]);
        }

        $this->user = $user;

        if ($user->web) {
            $this->webUser = \App\Models\User::where('telegram_id', $from->id)->first();
        }
    }

    // –ü—Ä–æ–∏–∑–æ—à–ª–æ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –±–æ—Ç–∞

    public function eventForBot()
    {
        if (@$this->update->my_chat_member->new_chat_member->status === 'kicked') {
            // –û—á–∏—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥–∏ –Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á—Ç–æ–±—ã –Ω–µ —Å–Ω–µ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å)
        } elseif (@$this->update->my_chat_member->new_chat_member->status === 'member' || @$this->update->my_chat_member->new_chat_member->status === 'administrator') {
            if ($this->update->my_chat_member->chat->type === 'private') {
                // –û—Ç–≤–µ—Ç –≤ –õ–°
            } else {
                // –û—Ç–≤–µ—Ç –≤ —á–∞—Ç–∞—Ö
            }
        }
    }

    // –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ

    public function profile()
    {
        $chatId = @$this->update->chat->id;

        if ($this->webUser) {
            $user = $this->webUser;
        } else {
            $user = $this->user;
        }

        $this->bot->sendMessage([
            'chat_id' => $chatId,
            'text' => $user->name . ' (id' . $user->telegram_id . ')
–ë–∞–ª–∞–Ω—Å ' . $user->balance . ' ‚ú®
–ú–æ–¥–µ–ª—å ' . $this->user->model,
            'reply_markup' => $this->markup
        ]);
    }

    // –û–ø–ª–∞—Ç–∞

    public function billing()
    {
        $chatId = @$this->update->chat->id;

        $this->bot->sendMessage([
            'chat_id' => $chatId,
            'text' => '–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º @chaglemanagerbot',
            'reply_markup' => $this->markup
        ]);
    }

    // –ù–æ–≤—ã–π —á–∞—Ç –∏ –æ—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

    public function new()
    {
        $chatId = @$this->update->chat->id;

        $this->user->messages()->delete();

        $this->bot->sendMessage([
            'chat_id' => $chatId,
            'text' => '–ù–∞—á–∞—Ç –Ω–æ–≤—ã–π —á–∞—Ç, –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω',
            'reply_markup' => $this->markup
        ]);
    }

    // –ò–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å

    public function change()
    {
        $chatId = @$this->update->chat->id;

        $text = mb_strtolower(@$this->update->text);

        $models = [
            'gpt-3.5-turbo',
            'gpt-3.5-turbo-16k',
            'openai/gpt-4',
            'openai/gpt-4-32k',
            'openai/gpt-4-turbo-preview',
            'anthropic/claude-instant-1',
            'anthropic/claude-3-opus',
            'anthropic/claude-3-haiku',
            'google/gemini-pro'
        ];

        if (in_array($text, $models)) {
            $this->user->model = $text;
            $this->user->save();

            $this->bot->sendMessage([
                'chat_id' => $chatId,
                'text' => '–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ' . $text,
                'reply_markup' => $this->markup
            ]);
        } else {
            $keyboard = json_encode([
                'keyboard' => [
                    ['gpt-3.5-turbo'],
                    ['gpt-3.5-turbo-16k'],
                    ['openai/gpt-4'],
                    ['openai/gpt-4-32k'],
                    ['openai/gpt-4-turbo-preview'],
                    ['anthropic/claude-instant-1'],
                    ['anthropic/claude-3-opus'],
                    ['anthropic/claude-3-haiku'],
                    ['google/gemini-pro']
                ],
                'resize_keyboard' => true,
                'one_time_keyboard' => true
            ]);

            $this->bot->sendMessage([
                'chat_id' => $chatId,
                'text' => '–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ',
                'reply_markup' => $keyboard
            ]);
        }
    }

    // –°—Ç–∞—Ä—Ç

    public function start()
    {
        $chatId = @$this->update->chat->id;

        $this->bot->sendMessage([
            'chat_id' => $chatId,
            'text' => 'üåü –ü—Ä–∏–≤–µ—Ç! –Ø –ß–∞–≥–ª–∏ –±–æ—Ç —Å –º–æ–¥–µ–ª—å—é ChatGPT

üß† –ü–∏—à–∏—Ç–µ –∫–æ–¥, —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç, –∏ —É–∑–Ω–∞–≤–∞–π—Ç–µ –Ω–æ–≤–æ–µ —Å –ø–æ–º–æ—â—å—é –ø–µ—Ä–µ–¥–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞
						
üöÄ –¶–µ–Ω—ã:
						
–ë–µ—Å–ø–ª–∞—Ç–Ω–æ (2 ‚ú®)
ChatGPT 3.5, Claude Instant, Gemini Pro
			
–ë–∞–∑–æ–≤—ã–π 199 ‚ÇΩ (199 ‚ú®)
ChatGPT 3.5, Claude Instant, Gemini Pro
ChatGPT 4, Claude 3
			
–ü—Ä–µ–º–∏—É–º 299 ‚ÇΩ (299 ‚ú®)
ChatGPT 3.5, Claude Instant, Gemini Pro
ChatGPT 4, Claude 3
			
‚ú® —ç—Ç–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞ Chagle, 1‚ÇΩ = 1‚ú®

–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –±–µ–∑ –∞–±–æ–Ω–µ–Ω—Ç—Å–∫–æ–π –ø–ª–∞—Ç—ã –∏ —Å–≥–æ—Ä–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤.
						
üîÑ –ß—Ç–æ–±—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–æ–≤—ã–π —á–∞—Ç", —á—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç',
            'reply_markup' => $this->markup
        ]);
    }

    // –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç Chagle

    public function connect()
    {
        $chatId = @$this->update->chat->id;

        if ($this->webUser) {
            $this->bot->sendMessage([
                'chat_id' => $chatId,
                'text' => '–í—ã —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–ª–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∫ ' . $this->webUser->name,
                'reply_markup' => $this->markup
            ]);
        } else {
            $token = Crypt::encryptString(serialize([
                'telegram_id' => $this->user->telegram_id,
                'expired' => now()->copy()->addHours(1)->toDateTimeString()
            ]));

            $this->bot->sendMessage([
                'chat_id' => $chatId,
                'text' => '–ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ ' . env('APP_URL') . '/telegram/' . $token,
                'reply_markup' => $this->markup
            ]);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ò–ò
    public function ii($text)
    {
        $chatId = @$this->update->chat->id;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∞–º–∞
      // $cache = Redis::get($chatId);
      // $time = time();
      // if (($time - $cache) <= 60) { // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è longpoll (—Å–ª–µ–¥—É–µ—Ç —Å–º–æ—Ç—Ä–µ—Ç—å –≤—Ä–µ–º—è –≤ update)
      //     return;
      // } else {
      //     Redis::set($chatId, $time);
      // }

        // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
        if ($this->webUser && $this->webUser->level < 1 || $this->user->level < 1) {
            $this->bot->sendMessage([
                'chat_id' => $chatId,
                'text' => '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –û—à–∏–±–∫–∞: 1',
                'reply_markup' => $this->markup
            ]);

            Redis::del($chatId);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        if ($this->webUser && $this->webUser->balance <= 0 || $this->user->balance <= 0) {
            $this->bot->sendMessage([
                'chat_id' => $chatId,
                'text' => '–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å',
                'reply_markup' => $this->markup
            ]);

            Redis::del($chatId);
            return;
        }

        if ($this->webUser && !$this->userService->checkLevel($this->webUser) || !$this->userService->checkLevel($this->user)) {
            $this->bot->sendMessage([
                'chat_id' => $chatId,
                'text' => '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç',
                'reply_markup' => $this->markup
            ]);

            Redis::del($chatId);
            return;
        }
        $this->messageService->create($this->user, $text, 'user');

        $history = $this->messageService->getHistory($this->user, false, $text);

        /*
            –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞ Undefined array key "index"
            –≠—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ—Å–∫–æ–ª—å–∫—É –ø–æ—Å—Ç–∞–≤—â–∏–∫ OpenRouter –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç index –¥–ª—è –º–æ–¥–µ–ª–µ–π, –∫–∞–∂–¥—ã–π choices –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å index
            –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–∏—Ç—å vendor/openai-php/client/src/Responses/Chat/CreateResponseChoice.php –Ω–∞ $attributes['index'] ?? 0
            
            –°–æ–∑–¥–∞–ª–∏ —Ñ–æ—Ä–∫, –µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–Ω–æ–≤–ª—è—Ç—å.
            –í –∏–¥–µ–∞–ª–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é.
        */
        $result = $this->streamService->execute('create', $this->user->model, $history, 2048);

        if ($result['error'] || !$result['result']->choices[0]->message->content) {
            $text = "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –û—à–∏–±–∫–∞: {$result['errorCode']}";

            $this->messageService->errorNoticeAdmin($text);
        } else {
            $text = $result['result']->choices[0]->message->content;

            $this->messageService->create($this->user, $text, 'assistant');

            // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
            $user = $this->webUser ?? $this->user;

            $this->userService->balanceDown($history, $user, $text, $user->model, $result['result']->id ?? false);
        }

        $this->bot->sendMessage([
            'chat_id' => $chatId,
            'text' => $text
        ]);

        Redis::del($chatId);
    }
}
